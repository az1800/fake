// middleware.ts
import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });

  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession();

  const url = req.nextUrl.clone();
  const { pathname } = url;

  // Add debug logging
  (`Middleware running for path: ${pathname}`, {
    hasSession: !!session,
    isLoginPage: pathname.includes("/login"),
    isAuthPage:
      pathname.includes("/adminDashboard") || pathname.includes("/blog-write"),
  });

  // Define protected routes - use the ACTUAL paths without route groups
  const isGuestRoute = pathname.includes("/login");
  const isAuthRoute =
    pathname.includes("/adminDashboard") || pathname.includes("/blog-write");

  // Handle guest routes (accessible only for non-authenticated users)
  if (isGuestRoute && session) {
    ("User is authenticated, redirecting from login to home");
    // Redirect authenticated users away from guest routes
    url.pathname = "/";
    return NextResponse.redirect(url);
  }

  // Handle authenticated routes (accessible only for authenticated users)
  if (isAuthRoute && !session) {
    ("User is not authenticated, redirecting to login");
    // Redirect non-authenticated users to login
    url.pathname = "/login";
    return NextResponse.redirect(url);
  }

  return res;
}

// Specify the EXACT paths this middleware should run on
export const config = {
  matcher: [
    "/login",
    "/adminDashboard",
    "/adminDashboard/:path*",
    "/blog-write",
    "/blog-write/:path*",
  ],
};
